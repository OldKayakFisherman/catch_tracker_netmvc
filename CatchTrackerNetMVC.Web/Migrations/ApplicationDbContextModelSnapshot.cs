// <auto-generated />
using System;
using CatchTrackerNetMVC.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CatchTrackerNetMVC.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("CatchTrackerNetMVC.Web.Data.Entities.CatchDetail", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<double>("AirTemperature")
                        .HasColumnType("REAL")
                        .HasColumnName("air_temperature");

                    b.Property<string>("Bait")
                        .HasColumnType("TEXT")
                        .HasColumnName("bait");

                    b.Property<DateTime>("CatchDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("catch_date");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL")
                        .HasColumnName("longitude");

                    b.Property<string>("Rod")
                        .HasColumnType("TEXT")
                        .HasColumnName("rod");

                    b.Property<string>("SkyConditions")
                        .HasColumnType("TEXT")
                        .HasColumnName("sky_conditions");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("species");

                    b.Property<string>("Technique")
                        .HasColumnType("TEXT")
                        .HasColumnName("technique");

                    b.Property<string>("TerminalTackle")
                        .HasColumnType("TEXT")
                        .HasColumnName("terminal_tackle");

                    b.Property<double>("WaterDepth")
                        .HasColumnType("REAL")
                        .HasColumnName("water_depth");

                    b.Property<double>("WaterTemperature")
                        .HasColumnType("REAL")
                        .HasColumnName("water_temperature");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("catch_details");
                });

            modelBuilder.Entity("CatchTrackerNetMVC.Web.Data.Entities.Media", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("CatchDetailId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("catch_detail_id");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT")
                        .HasColumnName("extension");

                    b.Property<int?>("FileSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("file_size");

                    b.Property<string>("Filename")
                        .HasColumnType("TEXT")
                        .HasColumnName("filename");

                    b.Property<string>("MimeType")
                        .HasColumnType("TEXT")
                        .HasColumnName("mimetype");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("upload_date");

                    b.HasKey("Id");

                    b.HasIndex("CatchDetailId");

                    b.ToTable("catch_media");
                });

            modelBuilder.Entity("CatchTrackerNetMVC.Web.Data.Entities.SearchIndex", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("CatchDetailId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("catch_detail_id");

                    b.Property<int?>("CatchId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("catch_id");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.HasKey("Id");

                    b.HasIndex("CatchDetailId");

                    b.ToTable("simple_search_index");
                });

            modelBuilder.Entity("CatchTrackerNetMVC.Web.Data.Entities.Media", b =>
                {
                    b.HasOne("CatchTrackerNetMVC.Web.Data.Entities.CatchDetail", "CatchDetail")
                        .WithMany("Media")
                        .HasForeignKey("CatchDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatchDetail");
                });

            modelBuilder.Entity("CatchTrackerNetMVC.Web.Data.Entities.SearchIndex", b =>
                {
                    b.HasOne("CatchTrackerNetMVC.Web.Data.Entities.CatchDetail", "CatchDetail")
                        .WithMany()
                        .HasForeignKey("CatchDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatchDetail");
                });

            modelBuilder.Entity("CatchTrackerNetMVC.Web.Data.Entities.CatchDetail", b =>
                {
                    b.Navigation("Media");
                });
#pragma warning restore 612, 618
        }
    }
}
